{
  "address": "0xdFFdCcE9Be646B37a5B770A3F1F8FdD80E8ECcD3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_badgeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_badgeDescription",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MintToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emittedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "hasValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holdersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isUserMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintBadge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe28704fe27276f824eca2b576e14cde48360ed903c1a3bb8dad62371e4816e30",
  "receipt": {
    "to": null,
    "from": "0xE66C2e5ec70Ff1054933E3bf27a8f953b3f99228",
    "contractAddress": "0xdFFdCcE9Be646B37a5B770A3F1F8FdD80E8ECcD3",
    "transactionIndex": 0,
    "gasUsed": "1590988",
    "logsBloom": "0x
    "blockHash": "0xa4300c2a997c9643bdc72575b48e720e344f5e6a4088d3107b75cd6fdff1db89",
    "transactionHash": "0xe28704fe27276f824eca2b576e14cde48360ed903c1a3bb8dad62371e4816e30",
    "logs": [],
    "blockNumber": 2043374,
    "cumulativeGasUsed": "1590988",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Chainlink Workshop 0x1",
    "CW0x1",
    "Chainlink workshop #1",
    "First time chainlink workshop"
  ],
  "numDeployments": 6,
  "solcInputHash": "9777298a246abe210735f076556915bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_badgeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_badgeDescription\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emittedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"owner\":\"Address for whom to query the balance\"},\"returns\":{\"_0\":\"Number of tokens owned by `owner`\"}},\"emittedCount()\":{\"returns\":{\"_0\":\"emittedCount Number of tokens emitted\"}},\"hasValid(address)\":{\"params\":{\"owner\":\"Address for whom to check the ownership\"},\"returns\":{\"_0\":\"True if `owner` has a valid token, false otherwise\"}},\"holdersCount()\":{\"returns\":{\"_0\":\"holdersCount Number of token holders  \"}},\"isValid(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"True if the token is valid, false otherwise\"}},\"name()\":{\"returns\":{\"_0\":\"Descriptive name of the tokens in this contract\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"Address of the owner of `tokenId`\"}},\"symbol()\":{\"returns\":{\"_0\":\"An abbreviated name of the tokens in this contract\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"Index of the token\"},\"returns\":{\"_0\":\"tokenId of the token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"Index of the token\",\"owner\":\"Address for whom to get the token\"},\"returns\":{\"_0\":\"tokenId of the token\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"URI for the token\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Minted(address,uint256)\":{\"notice\":\"Event emitted when a token `tokenId` is minted for `owner`\"},\"Revoked(address,uint256)\":{\"notice\":\"Event emitted when token `tokenId` of `owner` is revoked\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Count all tokens assigned to an owner\"},\"hasValid(address)\":{\"notice\":\"Check if an address owns a valid token in the contract\"},\"isValid(uint256)\":{\"notice\":\"Check if a token hasn't been revoked\"},\"ownerOf(uint256)\":{\"notice\":\"Get owner of a token\"},\"tokenByIndex(uint256)\":{\"notice\":\"Get a tokenId by it's index, where 0 <= index < total()\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Get the tokenId of a token using its position in the owner's list\"},\"tokenURI(uint256)\":{\"notice\":\"URI to query to get the token's metadata\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Badge.sol\":\"Badge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Badge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"./ERC4671.sol\\\";\\n\\ncontract Badge is ERC4671 {\\n\\n\\tstring private badgeName;\\n\\tstring private badgeDescription;\\n\\tmapping (address => bool) public isUserMinted;\\n\\n\\tevent MintToken(address owner, uint256 tokenId);\\n\\n\\tconstructor(string memory _name, string memory _symbol, string memory _badgeName, string memory _badgeDescription) ERC4671(_name, _symbol) {\\n\\t\\tbadgeName = _badgeName;\\n\\t\\tbadgeDescription = _badgeDescription;\\n\\t}\\n\\n\\tfunction mintBadge() external {\\n\\t\\trequire(!isUserMinted[msg.sender], \\\"Already minted\\\");\\n\\t\\t\\n\\t\\tuint256 tokenId = _mint(msg.sender);\\n\\n\\t\\tisUserMinted[msg.sender] = true;\\n\\t\\t\\n\\t\\temit MintToken(msg.sender, tokenId);\\n\\t}\\n\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    bytes memory dataURI = abi.encodePacked(\\n        '{',\\n\\t\\t\\t\\t\\t\\t'\\\"name\\\": \\\"', badgeName, '\\\",',\\n\\t\\t\\t\\t\\t\\t'\\\"description\\\": \\\"', badgeDescription, '\\\"',\\n        '}'\\n    );\\n    return string(\\n        abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(dataURI)\\n        )\\n    );\\n  }\\n\\n\\n}\",\"keccak256\":\"0x21abe9624a1dc44644d17e5686ea607b6f87b20a1f6ad53dbe228123a54d794f\",\"license\":\"MIT\"},\"contracts/ERC4671.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./interfaces/IERC4671.sol\\\";\\nimport \\\"./interfaces/IERC4671Metadata.sol\\\";\\nimport \\\"./interfaces/IERC4671Enumerable.sol\\\";\\n\\nabstract contract ERC4671 is IERC4671, IERC4671Metadata, IERC4671Enumerable, ERC165 {\\n    // Token data\\n    struct Token {\\n        address issuer;\\n        address owner;\\n        bool valid;\\n    }\\n\\n    // Mapping from tokenId to token\\n    mapping(uint256 => Token) private _tokens;\\n\\n    // Mapping from owner to token ids\\n    mapping(address => uint256[]) private _indexedTokenIds;\\n\\n    // Mapping from token id to index\\n    mapping(address => mapping(uint256 => uint256)) private _tokenIdIndex;\\n\\n    // Mapping from owner to number of valid tokens\\n    mapping(address => uint256) private _numberOfValidTokens;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Total number of tokens emitted\\n    uint256 private _emittedCount;\\n\\n    // Total number of token holders\\n    uint256 private _holdersCount;\\n\\n    // Contract creator\\n    address private _creator;\\n\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _creator = msg.sender;\\n    }\\n\\n    /// @notice Count all tokens assigned to an owner\\n    /// @param owner Address for whom to query the balance\\n    /// @return Number of tokens owned by `owner`\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        return _indexedTokenIds[owner].length;\\n    }\\n\\n    /// @notice Get owner of a token\\n    /// @param tokenId Identifier of the token\\n    /// @return Address of the owner of `tokenId`\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _getTokenOrRevert(tokenId).owner;\\n    }\\n\\n    /// @notice Check if a token hasn't been revoked\\n    /// @param tokenId Identifier of the token\\n    /// @return True if the token is valid, false otherwise\\n    function isValid(uint256 tokenId) public view virtual override returns (bool) {\\n        return _getTokenOrRevert(tokenId).valid;\\n    }\\n\\n    /// @notice Check if an address owns a valid token in the contract\\n    /// @param owner Address for whom to check the ownership\\n    /// @return True if `owner` has a valid token, false otherwise\\n    function hasValid(address owner) public view virtual override returns (bool) {\\n        return _numberOfValidTokens[owner] > 0;\\n    }\\n\\n    /// @return Descriptive name of the tokens in this contract\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @return An abbreviated name of the tokens in this contract\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @notice URI to query to get the token's metadata\\n    /// @param tokenId Identifier of the token\\n    /// @return URI for the token\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _getTokenOrRevert(tokenId);\\n        bytes memory baseURI = bytes(_baseURI());\\n        if (baseURI.length > 0) {\\n            return string(abi.encodePacked(\\n                baseURI,\\n                Strings.toHexString(tokenId, 32)\\n            ));\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    /// @return emittedCount Number of tokens emitted\\n    function emittedCount() public view override returns (uint256) {\\n        return _emittedCount;\\n    }\\n\\n    /// @return holdersCount Number of token holders  \\n    function holdersCount() public view override returns (uint256) {\\n        return _holdersCount;\\n    }\\n\\n    /// @notice Get the tokenId of a token using its position in the owner's list\\n    /// @param owner Address for whom to get the token\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        uint256[] storage ids = _indexedTokenIds[owner];\\n        require(index < ids.length, \\\"Token does not exist\\\");\\n        return ids[index];\\n    }\\n\\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        return index;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return \\n            interfaceId == type(IERC4671).interfaceId ||\\n            interfaceId == type(IERC4671Metadata).interfaceId ||\\n            interfaceId == type(IERC4671Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Prefix for all calls to tokenURI\\n    /// @return Common base URI for all token\\n    function _baseURI() internal pure virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @notice Mark the token as revoked\\n    /// @param tokenId Identifier of the token\\n    function _revoke(uint256 tokenId) internal virtual {\\n        Token storage token = _getTokenOrRevert(tokenId);\\n        require(token.valid, \\\"Token is already invalid\\\");\\n        token.valid = false;\\n        assert(_numberOfValidTokens[token.owner] > 0);\\n        _numberOfValidTokens[token.owner] -= 1;\\n        emit Revoked(token.owner, tokenId);\\n    }\\n\\n    /// @notice Mint a new token\\n    /// @param owner Address for whom to assign the token\\n    /// @return tokenId Identifier of the minted token\\n    function _mint(address owner) internal virtual returns (uint256 tokenId) {\\n        tokenId = _emittedCount;\\n        _mintUnsafe(owner, tokenId, true);\\n        emit Minted(owner, tokenId);\\n        _emittedCount += 1;\\n    }\\n\\n    /// @notice Mint a given tokenId\\n    /// @param owner Address for whom to assign the token\\n    /// @param tokenId Token identifier to assign to the owner\\n    /// @param valid Boolean to assert of the validity of the token \\n    function _mintUnsafe(address owner, uint256 tokenId, bool valid) internal {\\n        require(_tokens[tokenId].owner == address(0), \\\"Cannot mint an assigned token\\\");\\n        if (_indexedTokenIds[owner].length == 0) {\\n            _holdersCount += 1;\\n        }\\n        _tokens[tokenId] = Token(msg.sender, owner, valid);\\n        _tokenIdIndex[owner][tokenId] = _indexedTokenIds[owner].length;\\n        _indexedTokenIds[owner].push(tokenId);\\n        if (valid) {\\n            _numberOfValidTokens[owner] += 1;\\n        }\\n    }\\n\\n    /// @return True if the caller is the contract's creator, false otherwise\\n    function _isCreator() internal view virtual returns (bool) {\\n        return msg.sender == _creator;\\n    }\\n\\n    /// @notice Retrieve a token or revert if it does not exist\\n    /// @param tokenId Identifier of the token\\n    /// @return The Token struct\\n    function _getTokenOrRevert(uint256 tokenId) internal view virtual returns (Token storage) {\\n        Token storage token = _tokens[tokenId];\\n        require(token.owner != address(0), \\\"Token does not exist\\\");\\n        return token;\\n    }\\n\\n    /// @notice Remove a token\\n    /// @param tokenId Token identifier to remove\\n    function _removeToken(uint256 tokenId) internal virtual {\\n        Token storage token = _getTokenOrRevert(tokenId);\\n        _removeFromUnorderedArray(_indexedTokenIds[token.owner], _tokenIdIndex[token.owner][tokenId]);\\n        if (_indexedTokenIds[token.owner].length == 0) {\\n            assert(_holdersCount > 0);\\n            _holdersCount -= 1;\\n        }\\n        if (token.valid) {\\n            assert(_numberOfValidTokens[token.owner] > 0);\\n            _numberOfValidTokens[token.owner] -= 1;\\n        }\\n        delete _tokens[tokenId];\\n    }\\n\\n    /// @notice Removes an entry in an array by its index\\n    /// @param array Array for which to remove the entry\\n    /// @param index Index of the entry to remove\\n    function _removeFromUnorderedArray(uint256[] storage array, uint256 index) internal {\\n        require(index < array.length, \\\"Trying to delete out of bound index\\\");\\n        if (index != array.length - 1) {\\n            array[index] = array[array.length - 1];\\n        }\\n        array.pop();\\n    }\\n}\",\"keccak256\":\"0x9ef891a2a76f660037f32e288b2672a0fa3cd794ce5079d84bde3de1fdbf3aa3\",\"license\":\"CC0-1.0\"},\"contracts/interfaces/IERC4671.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC4671 is IERC165 {\\n    /// Event emitted when a token `tokenId` is minted for `owner`\\n    event Minted(address owner, uint256 tokenId);\\n\\n    /// Event emitted when token `tokenId` of `owner` is revoked\\n    event Revoked(address owner, uint256 tokenId);\\n\\n    /// @notice Count all tokens assigned to an owner\\n    /// @param owner Address for whom to query the balance\\n    /// @return Number of tokens owned by `owner`\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /// @notice Get owner of a token\\n    /// @param tokenId Identifier of the token\\n    /// @return Address of the owner of `tokenId`\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /// @notice Check if a token hasn't been revoked\\n    /// @param tokenId Identifier of the token\\n    /// @return True if the token is valid, false otherwise\\n    function isValid(uint256 tokenId) external view returns (bool);\\n\\n    /// @notice Check if an address owns a valid token in the contract\\n    /// @param owner Address for whom to check the ownership\\n    /// @return True if `owner` has a valid token, false otherwise\\n    function hasValid(address owner) external view returns (bool);\\n}\",\"keccak256\":\"0xa7f71b926c45ef041313163321a729f86da21cb544d2c4ef03f476b6af55e8c2\",\"license\":\"CC0-1.0\"},\"contracts/interfaces/IERC4671Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC4671.sol\\\";\\n\\ninterface IERC4671Enumerable is IERC4671 {\\n    /// @return emittedCount Number of tokens emitted\\n    function emittedCount() external view returns (uint256);\\n\\n    /// @return holdersCount Number of token holders  \\n    function holdersCount() external view returns (uint256);\\n\\n    /// @notice Get the tokenId of a token using its position in the owner's list\\n    /// @param owner Address for whom to get the token\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\",\"keccak256\":\"0x9f8396dc79c0442d9c9ece195471704b766ecb5e9329723e1eb41fa063b05893\",\"license\":\"CC0-1.0\"},\"contracts/interfaces/IERC4671Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC4671.sol\\\";\\n\\ninterface IERC4671Metadata is IERC4671 {\\n    /// @return Descriptive name of the tokens in this contract\\n    function name() external view returns (string memory);\\n\\n    /// @return An abbreviated name of the tokens in this contract\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice URI to query to get the token's metadata\\n    /// @param tokenId Identifier of the token\\n    /// @return URI for the token\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\",\"keccak256\":\"0x7f72455da05b519f62b427aa12cf25ec23d30fdc57e1e5509fb712657de8875b\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001ff138038062001ff1833981810160405281019062000037919062000261565b838381600490816200004a91906200059a565b5080600590816200005c91906200059a565b5033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508160099081620000b191906200059a565b5080600a9081620000c391906200059a565b505050505062000681565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200013782620000ec565b810181811067ffffffffffffffff82111715620001595762000158620000fd565b5b80604052505050565b60006200016e620000ce565b90506200017c82826200012c565b919050565b600067ffffffffffffffff8211156200019f576200019e620000fd565b5b620001aa82620000ec565b9050602081019050919050565b60005b83811015620001d7578082015181840152602081019050620001ba565b60008484015250505050565b6000620001fa620001f48462000181565b62000162565b905082815260208101848484011115620002195762000218620000e7565b5b62000226848285620001b7565b509392505050565b600082601f830112620002465762000245620000e2565b5b815162000258848260208601620001e3565b91505092915050565b600080600080608085870312156200027e576200027d620000d8565b5b600085015167ffffffffffffffff8111156200029f576200029e620000dd565b5b620002ad878288016200022e565b945050602085015167ffffffffffffffff811115620002d157620002d0620000dd565b5b620002df878288016200022e565b935050604085015167ffffffffffffffff811115620003035762000302620000dd565b5b62000311878288016200022e565b925050606085015167ffffffffffffffff811115620003355762000334620000dd565b5b62000343878288016200022e565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003a257607f821691505b602082108103620003b857620003b76200035a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004227fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003e3565b6200042e8683620003e3565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200047b620004756200046f8462000446565b62000450565b62000446565b9050919050565b6000819050919050565b62000497836200045a565b620004af620004a68262000482565b848454620003f0565b825550505050565b600090565b620004c6620004b7565b620004d38184846200048c565b505050565b5b81811015620004fb57620004ef600082620004bc565b600181019050620004d9565b5050565b601f8211156200054a576200051481620003be565b6200051f84620003d3565b810160208510156200052f578190505b620005476200053e85620003d3565b830182620004d8565b50505b505050565b600082821c905092915050565b60006200056f600019846008026200054f565b1980831691505092915050565b60006200058a83836200055c565b9150826002028217905092915050565b620005a5826200034f565b67ffffffffffffffff811115620005c157620005c0620000fd565b5b620005cd825462000389565b620005da828285620004ff565b600060209050601f831160018114620006125760008415620005fd578287015190505b6200060985826200057c565b86555062000679565b601f1984166200062286620003be565b60005b828110156200064c5784890151825560018201915060208501945060208101905062000625565b868310156200066c578489015162000668601f8916826200055c565b8355505b6001600288020188555050505b505050505050565b61196080620006916000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636b4ed21b1161008c578063b708f2fa11610066578063b708f2fa14610287578063c87b56dd146102b7578063da1b3cb0146102e7578063f577a500146102f1576100ea565b80636b4ed21b1461021b57806370a082311461023957806395d89b4114610269576100ea565b80632f745c59116100c85780632f745c591461015b578063439455121461018b5780634f6ccce7146101bb5780636352211e146101eb576100ea565b806301ffc9a7146100ef57806306fdde031461011f57806326019c181461013d575b600080fd5b61010960048036038101906101049190610fb3565b610321565b6040516101169190610ffb565b60405180910390f35b61012761046b565b60405161013491906110a6565b60405180910390f35b6101456104fd565b60405161015291906110e1565b60405180910390f35b61017560048036038101906101709190611186565b610507565b60405161018291906110e1565b60405180910390f35b6101a560048036038101906101a091906111c6565b6105b8565b6040516101b29190610ffb565b60405180910390f35b6101d560048036038101906101d091906111f3565b610603565b6040516101e291906110e1565b60405180910390f35b610205600480360381019061020091906111f3565b61060d565b604051610212919061122f565b60405180910390f35b610223610643565b60405161023091906110e1565b60405180910390f35b610253600480360381019061024e91906111c6565b61064d565b60405161026091906110e1565b60405180910390f35b610271610699565b60405161027e91906110a6565b60405180910390f35b6102a1600480360381019061029c91906111c6565b61072b565b6040516102ae9190610ffb565b60405180910390f35b6102d160048036038101906102cc91906111f3565b61074b565b6040516102de91906110a6565b60405180910390f35b6102ef6107a5565b005b61030b600480360381019061030691906111f3565b6108d3565b6040516103189190610ffb565b60405180910390f35b60007fa511533d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103ec57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061045457507f2d57debd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104645750610463826108f6565b5b9050919050565b60606004805461047a90611279565b80601f01602080910402602001604051908101604052809291908181526020018280546104a690611279565b80156104f35780601f106104c8576101008083540402835291602001916104f3565b820191906000526020600020905b8154815290600101906020018083116104d657829003601f168201915b5050505050905090565b6000600654905090565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080805490508310610591576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610588906112f6565b60405180910390fd5b8083815481106105a4576105a3611316565b5b906000526020600020015491505092915050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054119050919050565b6000819050919050565b600061061882610960565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600754905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6060600580546106a890611279565b80601f01602080910402602001604051908101604052809291908181526020018280546106d490611279565b80156107215780601f106106f657610100808354040283529160200191610721565b820191906000526020600020905b81548152906001019060200180831161070457829003601f168201915b5050505050905090565b600b6020528060005260406000206000915054906101000a900460ff1681565b606060006009600a6040516020016107649291906115b0565b604051602081830303815290604052905061077e81610a13565b60405160200161078e9190611693565b604051602081830303815290604052915050919050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990611701565b60405180910390fd5b600061083d33610b76565b90506001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fdcdea898caf5576419f89caf69301592a4758349a0bd62300b58849213420a7233826040516108c8929190611721565b60405180910390a150565b60006108de82610960565b60010160149054906101000a900460ff169050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000806000808481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a01906112f6565b60405180910390fd5b80915050919050565b60606000825103610a3557604051806020016040528060008152509050610b71565b60006040518060600160405280604081526020016118eb6040913990506000600360028551610a649190611779565b610a6e91906117dc565b6004610a7a919061180d565b67ffffffffffffffff811115610a9357610a9261184f565b5b6040519080825280601f01601f191660200182016040528015610ac55781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015610b31576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050610ad6565b5050600386510660018114610b4d5760028114610b6057610b68565b603d6001830353603d6002830353610b68565b603d60018303535b50505080925050505b919050565b60006006549050610b8982826001610be1565b7f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe8282604051610bba929190611721565b60405180910390a1600160066000828254610bd59190611779565b92505081905550919050565b600073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7c906118ca565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905003610cea57600160076000828254610ce29190611779565b925050819055505b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200182151581525060008084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908315150217905550905050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150558015610f51576001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f499190611779565b925050819055505b505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610f9081610f5b565b8114610f9b57600080fd5b50565b600081359050610fad81610f87565b92915050565b600060208284031215610fc957610fc8610f56565b5b6000610fd784828501610f9e565b91505092915050565b60008115159050919050565b610ff581610fe0565b82525050565b60006020820190506110106000830184610fec565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611050578082015181840152602081019050611035565b60008484015250505050565b6000601f19601f8301169050919050565b600061107882611016565b6110828185611021565b9350611092818560208601611032565b61109b8161105c565b840191505092915050565b600060208201905081810360008301526110c0818461106d565b905092915050565b6000819050919050565b6110db816110c8565b82525050565b60006020820190506110f660008301846110d2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611127826110fc565b9050919050565b6111378161111c565b811461114257600080fd5b50565b6000813590506111548161112e565b92915050565b611163816110c8565b811461116e57600080fd5b50565b6000813590506111808161115a565b92915050565b6000806040838503121561119d5761119c610f56565b5b60006111ab85828601611145565b92505060206111bc85828601611171565b9150509250929050565b6000602082840312156111dc576111db610f56565b5b60006111ea84828501611145565b91505092915050565b60006020828403121561120957611208610f56565b5b600061121784828501611171565b91505092915050565b6112298161111c565b82525050565b60006020820190506112446000830184611220565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061129157607f821691505b6020821081036112a4576112a361124a565b5b50919050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b60006112e0601483611021565b91506112eb826112aa565b602082019050919050565b6000602082019050818103600083015261130f816112d3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b6000611386600183611345565b915061139182611350565b600182019050919050565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b60006113d2600983611345565b91506113dd8261139c565b600982019050919050565b60008190508160005260206000209050919050565b6000815461140a81611279565b6114148186611345565b9450600182166000811461142f576001811461144457611477565b60ff1983168652811515820286019350611477565b61144d856113e8565b60005b8381101561146f57815481890152600182019150602081019050611450565b838801955050505b50505092915050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b60006114b6600283611345565b91506114c182611480565b600282019050919050565b7f226465736372697074696f6e223a202200000000000000000000000000000000600082015250565b6000611502601083611345565b915061150d826114cc565b601082019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b600061154e600183611345565b915061155982611518565b600182019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b600061159a600183611345565b91506115a582611564565b600182019050919050565b60006115bb82611379565b91506115c6826113c5565b91506115d282856113fd565b91506115dd826114a9565b91506115e8826114f5565b91506115f482846113fd565b91506115ff82611541565b915061160a8261158d565b91508190509392505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b600061164c601d83611345565b915061165782611616565b601d82019050919050565b600061166d82611016565b6116778185611345565b9350611687818560208601611032565b80840191505092915050565b600061169e8261163f565b91506116aa8284611662565b915081905092915050565b7f416c7265616479206d696e746564000000000000000000000000000000000000600082015250565b60006116eb600e83611021565b91506116f6826116b5565b602082019050919050565b6000602082019050818103600083015261171a816116de565b9050919050565b60006040820190506117366000830185611220565b61174360208301846110d2565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611784826110c8565b915061178f836110c8565b92508282019050808211156117a7576117a661174a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006117e7826110c8565b91506117f2836110c8565b925082611802576118016117ad565b5b828204905092915050565b6000611818826110c8565b9150611823836110c8565b9250828202611831816110c8565b915082820484148315176118485761184761174a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f43616e6e6f74206d696e7420616e2061737369676e656420746f6b656e000000600082015250565b60006118b4601d83611021565b91506118bf8261187e565b602082019050919050565b600060208201905081810360008301526118e3816118a7565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220682bdce3f551d1a6ebff33a46e7d6cf81d955b9f038a52bbe1fe9df08090c92764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636b4ed21b1161008c578063b708f2fa11610066578063b708f2fa14610287578063c87b56dd146102b7578063da1b3cb0146102e7578063f577a500146102f1576100ea565b80636b4ed21b1461021b57806370a082311461023957806395d89b4114610269576100ea565b80632f745c59116100c85780632f745c591461015b578063439455121461018b5780634f6ccce7146101bb5780636352211e146101eb576100ea565b806301ffc9a7146100ef57806306fdde031461011f57806326019c181461013d575b600080fd5b61010960048036038101906101049190610fb3565b610321565b6040516101169190610ffb565b60405180910390f35b61012761046b565b60405161013491906110a6565b60405180910390f35b6101456104fd565b60405161015291906110e1565b60405180910390f35b61017560048036038101906101709190611186565b610507565b60405161018291906110e1565b60405180910390f35b6101a560048036038101906101a091906111c6565b6105b8565b6040516101b29190610ffb565b60405180910390f35b6101d560048036038101906101d091906111f3565b610603565b6040516101e291906110e1565b60405180910390f35b610205600480360381019061020091906111f3565b61060d565b604051610212919061122f565b60405180910390f35b610223610643565b60405161023091906110e1565b60405180910390f35b610253600480360381019061024e91906111c6565b61064d565b60405161026091906110e1565b60405180910390f35b610271610699565b60405161027e91906110a6565b60405180910390f35b6102a1600480360381019061029c91906111c6565b61072b565b6040516102ae9190610ffb565b60405180910390f35b6102d160048036038101906102cc91906111f3565b61074b565b6040516102de91906110a6565b60405180910390f35b6102ef6107a5565b005b61030b600480360381019061030691906111f3565b6108d3565b6040516103189190610ffb565b60405180910390f35b60007fa511533d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103ec57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061045457507f2d57debd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104645750610463826108f6565b5b9050919050565b60606004805461047a90611279565b80601f01602080910402602001604051908101604052809291908181526020018280546104a690611279565b80156104f35780601f106104c8576101008083540402835291602001916104f3565b820191906000526020600020905b8154815290600101906020018083116104d657829003601f168201915b5050505050905090565b6000600654905090565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080805490508310610591576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610588906112f6565b60405180910390fd5b8083815481106105a4576105a3611316565b5b906000526020600020015491505092915050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054119050919050565b6000819050919050565b600061061882610960565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600754905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6060600580546106a890611279565b80601f01602080910402602001604051908101604052809291908181526020018280546106d490611279565b80156107215780601f106106f657610100808354040283529160200191610721565b820191906000526020600020905b81548152906001019060200180831161070457829003601f168201915b5050505050905090565b600b6020528060005260406000206000915054906101000a900460ff1681565b606060006009600a6040516020016107649291906115b0565b604051602081830303815290604052905061077e81610a13565b60405160200161078e9190611693565b604051602081830303815290604052915050919050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990611701565b60405180910390fd5b600061083d33610b76565b90506001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fdcdea898caf5576419f89caf69301592a4758349a0bd62300b58849213420a7233826040516108c8929190611721565b60405180910390a150565b60006108de82610960565b60010160149054906101000a900460ff169050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000806000808481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a01906112f6565b60405180910390fd5b80915050919050565b60606000825103610a3557604051806020016040528060008152509050610b71565b60006040518060600160405280604081526020016118eb6040913990506000600360028551610a649190611779565b610a6e91906117dc565b6004610a7a919061180d565b67ffffffffffffffff811115610a9357610a9261184f565b5b6040519080825280601f01601f191660200182016040528015610ac55781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015610b31576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050610ad6565b5050600386510660018114610b4d5760028114610b6057610b68565b603d6001830353603d6002830353610b68565b603d60018303535b50505080925050505b919050565b60006006549050610b8982826001610be1565b7f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe8282604051610bba929190611721565b60405180910390a1600160066000828254610bd59190611779565b92505081905550919050565b600073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7c906118ca565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905003610cea57600160076000828254610ce29190611779565b925050819055505b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200182151581525060008084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908315150217905550905050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150558015610f51576001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f499190611779565b925050819055505b505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610f9081610f5b565b8114610f9b57600080fd5b50565b600081359050610fad81610f87565b92915050565b600060208284031215610fc957610fc8610f56565b5b6000610fd784828501610f9e565b91505092915050565b60008115159050919050565b610ff581610fe0565b82525050565b60006020820190506110106000830184610fec565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611050578082015181840152602081019050611035565b60008484015250505050565b6000601f19601f8301169050919050565b600061107882611016565b6110828185611021565b9350611092818560208601611032565b61109b8161105c565b840191505092915050565b600060208201905081810360008301526110c0818461106d565b905092915050565b6000819050919050565b6110db816110c8565b82525050565b60006020820190506110f660008301846110d2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611127826110fc565b9050919050565b6111378161111c565b811461114257600080fd5b50565b6000813590506111548161112e565b92915050565b611163816110c8565b811461116e57600080fd5b50565b6000813590506111808161115a565b92915050565b6000806040838503121561119d5761119c610f56565b5b60006111ab85828601611145565b92505060206111bc85828601611171565b9150509250929050565b6000602082840312156111dc576111db610f56565b5b60006111ea84828501611145565b91505092915050565b60006020828403121561120957611208610f56565b5b600061121784828501611171565b91505092915050565b6112298161111c565b82525050565b60006020820190506112446000830184611220565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061129157607f821691505b6020821081036112a4576112a361124a565b5b50919050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b60006112e0601483611021565b91506112eb826112aa565b602082019050919050565b6000602082019050818103600083015261130f816112d3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b6000611386600183611345565b915061139182611350565b600182019050919050565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b60006113d2600983611345565b91506113dd8261139c565b600982019050919050565b60008190508160005260206000209050919050565b6000815461140a81611279565b6114148186611345565b9450600182166000811461142f576001811461144457611477565b60ff1983168652811515820286019350611477565b61144d856113e8565b60005b8381101561146f57815481890152600182019150602081019050611450565b838801955050505b50505092915050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b60006114b6600283611345565b91506114c182611480565b600282019050919050565b7f226465736372697074696f6e223a202200000000000000000000000000000000600082015250565b6000611502601083611345565b915061150d826114cc565b601082019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b600061154e600183611345565b915061155982611518565b600182019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b600061159a600183611345565b91506115a582611564565b600182019050919050565b60006115bb82611379565b91506115c6826113c5565b91506115d282856113fd565b91506115dd826114a9565b91506115e8826114f5565b91506115f482846113fd565b91506115ff82611541565b915061160a8261158d565b91508190509392505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b600061164c601d83611345565b915061165782611616565b601d82019050919050565b600061166d82611016565b6116778185611345565b9350611687818560208601611032565b80840191505092915050565b600061169e8261163f565b91506116aa8284611662565b915081905092915050565b7f416c7265616479206d696e746564000000000000000000000000000000000000600082015250565b60006116eb600e83611021565b91506116f6826116b5565b602082019050919050565b6000602082019050818103600083015261171a816116de565b9050919050565b60006040820190506117366000830185611220565b61174360208301846110d2565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611784826110c8565b915061178f836110c8565b92508282019050808211156117a7576117a661174a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006117e7826110c8565b91506117f2836110c8565b925082611802576118016117ad565b5b828204905092915050565b6000611818826110c8565b9150611823836110c8565b9250828202611831816110c8565b915082820484148315176118485761184761174a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f43616e6e6f74206d696e7420616e2061737369676e656420746f6b656e000000600082015250565b60006118b4601d83611021565b91506118bf8261187e565b602082019050919050565b600060208201905081810360008301526118e3816118a7565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220682bdce3f551d1a6ebff33a46e7d6cf81d955b9f038a52bbe1fe9df08090c92764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "owner": "Address for whom to query the balance"
        },
        "returns": {
          "_0": "Number of tokens owned by `owner`"
        }
      },
      "emittedCount()": {
        "returns": {
          "_0": "emittedCount Number of tokens emitted"
        }
      },
      "hasValid(address)": {
        "params": {
          "owner": "Address for whom to check the ownership"
        },
        "returns": {
          "_0": "True if `owner` has a valid token, false otherwise"
        }
      },
      "holdersCount()": {
        "returns": {
          "_0": "holdersCount Number of token holders  "
        }
      },
      "isValid(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "True if the token is valid, false otherwise"
        }
      },
      "name()": {
        "returns": {
          "_0": "Descriptive name of the tokens in this contract"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "Address of the owner of `tokenId`"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "An abbreviated name of the tokens in this contract"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "Index of the token"
        },
        "returns": {
          "_0": "tokenId of the token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "Index of the token",
          "owner": "Address for whom to get the token"
        },
        "returns": {
          "_0": "tokenId of the token"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "URI for the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Minted(address,uint256)": {
        "notice": "Event emitted when a token `tokenId` is minted for `owner`"
      },
      "Revoked(address,uint256)": {
        "notice": "Event emitted when token `tokenId` of `owner` is revoked"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Count all tokens assigned to an owner"
      },
      "hasValid(address)": {
        "notice": "Check if an address owns a valid token in the contract"
      },
      "isValid(uint256)": {
        "notice": "Check if a token hasn't been revoked"
      },
      "ownerOf(uint256)": {
        "notice": "Get owner of a token"
      },
      "tokenByIndex(uint256)": {
        "notice": "Get a tokenId by it's index, where 0 <= index < total()"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Get the tokenId of a token using its position in the owner's list"
      },
      "tokenURI(uint256)": {
        "notice": "URI to query to get the token's metadata"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 448,
        "contract": "contracts/Badge.sol:Badge",
        "label": "_tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Token)443_storage)"
      },
      {
        "astId": 453,
        "contract": "contracts/Badge.sol:Badge",
        "label": "_indexedTokenIds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 459,
        "contract": "contracts/Badge.sol:Badge",
        "label": "_tokenIdIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 463,
        "contract": "contracts/Badge.sol:Badge",
        "label": "_numberOfValidTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 465,
        "contract": "contracts/Badge.sol:Badge",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 467,
        "contract": "contracts/Badge.sol:Badge",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 469,
        "contract": "contracts/Badge.sol:Badge",
        "label": "_emittedCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 471,
        "contract": "contracts/Badge.sol:Badge",
        "label": "_holdersCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 473,
        "contract": "contracts/Badge.sol:Badge",
        "label": "_creator",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 316,
        "contract": "contracts/Badge.sol:Badge",
        "label": "badgeName",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 318,
        "contract": "contracts/Badge.sol:Badge",
        "label": "badgeDescription",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 322,
        "contract": "contracts/Badge.sol:Badge",
        "label": "isUserMinted",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Token)443_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC4671.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)443_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Token)443_storage": {
        "encoding": "inplace",
        "label": "struct ERC4671.Token",
        "members": [
          {
            "astId": 438,
            "contract": "contracts/Badge.sol:Badge",
            "label": "issuer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 440,
            "contract": "contracts/Badge.sol:Badge",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 442,
            "contract": "contracts/Badge.sol:Badge",
            "label": "valid",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}