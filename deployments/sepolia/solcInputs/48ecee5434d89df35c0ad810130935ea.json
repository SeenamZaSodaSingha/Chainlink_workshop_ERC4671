{
  "language": "Solidity",
  "sources": {
    "contracts/Badge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\nimport \"./ERC4671.sol\";\n\ncontract Badge is ERC4671 {\n\n\tmapping (address => bool) public isUserMinted;\n\n\tevent MintToken(address owner, uint256 tokenId);\n\n\tconstructor(string memory _name, string memory _symbol) ERC4671(_name, _symbol) {\n\n\t}\n\n\tfunction mintBadge() external {\n\t\trequire(!isUserMinted[msg.sender], \"Already minted\");\n\t\t\n\t\tuint256 tokenId = _mint(msg.sender);\n\n\t\tisUserMinted[msg.sender] = true;\n\t\t\n\t\temit MintToken(msg.sender, tokenId);\n\t}\n\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    bytes memory dataURI = abi.encodePacked(\n        '{',\n            '\"name\": \"Chainlink workshop # 1\",',\n            '\"description\": \"First time solidity workshop\",',\n            '\"tokenId\":', tokenId,\n        '}'\n    );\n    return string(\n        abi.encodePacked(\n            \"data:application/json;base64,\",\n            Base64.encode(dataURI)\n        )\n    );\n  }\n\n\n}"
    },
    "contracts/ERC4671.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./interfaces/IERC4671.sol\";\nimport \"./interfaces/IERC4671Metadata.sol\";\nimport \"./interfaces/IERC4671Enumerable.sol\";\n\nabstract contract ERC4671 is IERC4671, IERC4671Metadata, IERC4671Enumerable, ERC165 {\n    // Token data\n    struct Token {\n        address issuer;\n        address owner;\n        bool valid;\n    }\n\n    // Mapping from tokenId to token\n    mapping(uint256 => Token) private _tokens;\n\n    // Mapping from owner to token ids\n    mapping(address => uint256[]) private _indexedTokenIds;\n\n    // Mapping from token id to index\n    mapping(address => mapping(uint256 => uint256)) private _tokenIdIndex;\n\n    // Mapping from owner to number of valid tokens\n    mapping(address => uint256) private _numberOfValidTokens;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Total number of tokens emitted\n    uint256 private _emittedCount;\n\n    // Total number of token holders\n    uint256 private _holdersCount;\n\n    // Contract creator\n    address private _creator;\n\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _creator = msg.sender;\n    }\n\n    /// @notice Count all tokens assigned to an owner\n    /// @param owner Address for whom to query the balance\n    /// @return Number of tokens owned by `owner`\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        return _indexedTokenIds[owner].length;\n    }\n\n    /// @notice Get owner of a token\n    /// @param tokenId Identifier of the token\n    /// @return Address of the owner of `tokenId`\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _getTokenOrRevert(tokenId).owner;\n    }\n\n    /// @notice Check if a token hasn't been revoked\n    /// @param tokenId Identifier of the token\n    /// @return True if the token is valid, false otherwise\n    function isValid(uint256 tokenId) public view virtual override returns (bool) {\n        return _getTokenOrRevert(tokenId).valid;\n    }\n\n    /// @notice Check if an address owns a valid token in the contract\n    /// @param owner Address for whom to check the ownership\n    /// @return True if `owner` has a valid token, false otherwise\n    function hasValid(address owner) public view virtual override returns (bool) {\n        return _numberOfValidTokens[owner] > 0;\n    }\n\n    /// @return Descriptive name of the tokens in this contract\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /// @return An abbreviated name of the tokens in this contract\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /// @notice URI to query to get the token's metadata\n    /// @param tokenId Identifier of the token\n    /// @return URI for the token\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _getTokenOrRevert(tokenId);\n        bytes memory baseURI = bytes(_baseURI());\n        if (baseURI.length > 0) {\n            return string(abi.encodePacked(\n                baseURI,\n                Strings.toHexString(tokenId, 32)\n            ));\n        }\n        return \"\";\n    }\n\n    /// @return emittedCount Number of tokens emitted\n    function emittedCount() public view override returns (uint256) {\n        return _emittedCount;\n    }\n\n    /// @return holdersCount Number of token holders  \n    function holdersCount() public view override returns (uint256) {\n        return _holdersCount;\n    }\n\n    /// @notice Get the tokenId of a token using its position in the owner's list\n    /// @param owner Address for whom to get the token\n    /// @param index Index of the token\n    /// @return tokenId of the token\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        uint256[] storage ids = _indexedTokenIds[owner];\n        require(index < ids.length, \"Token does not exist\");\n        return ids[index];\n    }\n\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\n    /// @param index Index of the token\n    /// @return tokenId of the token\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        return index;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return \n            interfaceId == type(IERC4671).interfaceId ||\n            interfaceId == type(IERC4671Metadata).interfaceId ||\n            interfaceId == type(IERC4671Enumerable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Prefix for all calls to tokenURI\n    /// @return Common base URI for all token\n    function _baseURI() internal pure virtual returns (string memory) {\n        return \"\";\n    }\n\n    /// @notice Mark the token as revoked\n    /// @param tokenId Identifier of the token\n    function _revoke(uint256 tokenId) internal virtual {\n        Token storage token = _getTokenOrRevert(tokenId);\n        require(token.valid, \"Token is already invalid\");\n        token.valid = false;\n        assert(_numberOfValidTokens[token.owner] > 0);\n        _numberOfValidTokens[token.owner] -= 1;\n        emit Revoked(token.owner, tokenId);\n    }\n\n    /// @notice Mint a new token\n    /// @param owner Address for whom to assign the token\n    /// @return tokenId Identifier of the minted token\n    function _mint(address owner) internal virtual returns (uint256 tokenId) {\n        tokenId = _emittedCount;\n        _mintUnsafe(owner, tokenId, true);\n        emit Minted(owner, tokenId);\n        _emittedCount += 1;\n    }\n\n    /// @notice Mint a given tokenId\n    /// @param owner Address for whom to assign the token\n    /// @param tokenId Token identifier to assign to the owner\n    /// @param valid Boolean to assert of the validity of the token \n    function _mintUnsafe(address owner, uint256 tokenId, bool valid) internal {\n        require(_tokens[tokenId].owner == address(0), \"Cannot mint an assigned token\");\n        if (_indexedTokenIds[owner].length == 0) {\n            _holdersCount += 1;\n        }\n        _tokens[tokenId] = Token(msg.sender, owner, valid);\n        _tokenIdIndex[owner][tokenId] = _indexedTokenIds[owner].length;\n        _indexedTokenIds[owner].push(tokenId);\n        if (valid) {\n            _numberOfValidTokens[owner] += 1;\n        }\n    }\n\n    /// @return True if the caller is the contract's creator, false otherwise\n    function _isCreator() internal view virtual returns (bool) {\n        return msg.sender == _creator;\n    }\n\n    /// @notice Retrieve a token or revert if it does not exist\n    /// @param tokenId Identifier of the token\n    /// @return The Token struct\n    function _getTokenOrRevert(uint256 tokenId) internal view virtual returns (Token storage) {\n        Token storage token = _tokens[tokenId];\n        require(token.owner != address(0), \"Token does not exist\");\n        return token;\n    }\n\n    /// @notice Remove a token\n    /// @param tokenId Token identifier to remove\n    function _removeToken(uint256 tokenId) internal virtual {\n        Token storage token = _getTokenOrRevert(tokenId);\n        _removeFromUnorderedArray(_indexedTokenIds[token.owner], _tokenIdIndex[token.owner][tokenId]);\n        if (_indexedTokenIds[token.owner].length == 0) {\n            assert(_holdersCount > 0);\n            _holdersCount -= 1;\n        }\n        if (token.valid) {\n            assert(_numberOfValidTokens[token.owner] > 0);\n            _numberOfValidTokens[token.owner] -= 1;\n        }\n        delete _tokens[tokenId];\n    }\n\n    /// @notice Removes an entry in an array by its index\n    /// @param array Array for which to remove the entry\n    /// @param index Index of the entry to remove\n    function _removeFromUnorderedArray(uint256[] storage array, uint256 index) internal {\n        require(index < array.length, \"Trying to delete out of bound index\");\n        if (index != array.length - 1) {\n            array[index] = array[array.length - 1];\n        }\n        array.pop();\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/IERC4671.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface IERC4671 is IERC165 {\n    /// Event emitted when a token `tokenId` is minted for `owner`\n    event Minted(address owner, uint256 tokenId);\n\n    /// Event emitted when token `tokenId` of `owner` is revoked\n    event Revoked(address owner, uint256 tokenId);\n\n    /// @notice Count all tokens assigned to an owner\n    /// @param owner Address for whom to query the balance\n    /// @return Number of tokens owned by `owner`\n    function balanceOf(address owner) external view returns (uint256);\n\n    /// @notice Get owner of a token\n    /// @param tokenId Identifier of the token\n    /// @return Address of the owner of `tokenId`\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    /// @notice Check if a token hasn't been revoked\n    /// @param tokenId Identifier of the token\n    /// @return True if the token is valid, false otherwise\n    function isValid(uint256 tokenId) external view returns (bool);\n\n    /// @notice Check if an address owns a valid token in the contract\n    /// @param owner Address for whom to check the ownership\n    /// @return True if `owner` has a valid token, false otherwise\n    function hasValid(address owner) external view returns (bool);\n}"
    },
    "contracts/interfaces/IERC4671Metadata.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.0;\n\nimport \"./IERC4671.sol\";\n\ninterface IERC4671Metadata is IERC4671 {\n    /// @return Descriptive name of the tokens in this contract\n    function name() external view returns (string memory);\n\n    /// @return An abbreviated name of the tokens in this contract\n    function symbol() external view returns (string memory);\n\n    /// @notice URI to query to get the token's metadata\n    /// @param tokenId Identifier of the token\n    /// @return URI for the token\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}"
    },
    "contracts/interfaces/IERC4671Enumerable.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.0;\n\nimport \"./IERC4671.sol\";\n\ninterface IERC4671Enumerable is IERC4671 {\n    /// @return emittedCount Number of tokens emitted\n    function emittedCount() external view returns (uint256);\n\n    /// @return holdersCount Number of token holders  \n    function holdersCount() external view returns (uint256);\n\n    /// @notice Get the tokenId of a token using its position in the owner's list\n    /// @param owner Address for whom to get the token\n    /// @param index Index of the token\n    /// @return tokenId of the token\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\n    /// @param index Index of the token\n    /// @return tokenId of the token\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}